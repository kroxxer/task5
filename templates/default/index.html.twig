{% extends 'base.html.twig' %}

{% block title %}Generate Persons{% endblock %}

{% block body %}
    <main class="m-auto text-center">
        <nav class="navbar navbar-expand-lg bg-body-tertiary rounded" aria-label="Twelfth navbar example">
            <div class="collapse navbar-collapse justify-content-md-center">
                <ul class="navbar-nav fs-4">
                    <li class="nav-item mx-2">
                        <label for="region">
                            Region:
                        </label>
                    </li>
                    <li class="nav-item mx-2">
                        <select name="region" class="form-select" id="region">
                            <option value={{ defaultRegion }} selected></option>
                            {% for region in regions %}
                                <option value="{{ region.value }}">{{ region.name }}</option>
                            {% endfor %}
                        </select>
                    </li>
                    <li class="nav-item ms-5">
                        <label for="errors-slider">
                            Errors:
                        </label>
                    </li>
                    <li class="nav-item mx-2">
                        <input type="range" min="1" max="10" value="0" step="0.25" class="slider" name="error" id="errors-slider">
                    </li>
                    <li class="nav-item mx-2">
                        <input type="text" name="error" value="0" class="form-control" maxlength="4" size="4" id="errors-input">
                    </li>
                    <li class="nav-item ms-5">
                        <label for="seed">
                            Seed:
                        </label>
                    </li>
                    <li class="nav-item mx-2">
                        <input type="text" name="seed" id="seed" value="0" class="form-control" maxlength="4" size="5">
                    </li>
                    <li class="nav-item mx-2">
                        <button class="btn btn-primary button-large" id="random">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-shuffle" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M0 3.5A.5.5 0 0 1 .5 3H1c2.202 0 3.827 1.24 4.874 2.418.49.552.865 1.102 1.126 1.532.26-.43.636-.98 1.126-1.532C9.173 4.24 10.798 3 13 3v1c-1.798 0-3.173 1.01-4.126 2.082A9.6 9.6 0 0 0 7.556 8a9.6 9.6 0 0 0 1.317 1.918C9.828 10.99 11.204 12 13 12v1c-2.202 0-3.827-1.24-4.874-2.418A10.6 10.6 0 0 1 7 9.05c-.26.43-.636.98-1.126 1.532C4.827 11.76 3.202 13 1 13H.5a.5.5 0 0 1 0-1H1c1.798 0 3.173-1.01 4.126-2.082A9.6 9.6 0 0 0 6.444 8a9.6 9.6 0 0 0-1.317-1.918C4.172 5.01 2.796 4 1 4H.5a.5.5 0 0 1-.5-.5"></path>
                                <path d="M13 5.466V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192m0 9v-3.932a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192"></path>
                            </svg>
                        </button>
                    </li>
                    <li class="nav-item mx-2">
                        <button class="btn btn-primary button-large">Export to CSV</button>
                    </li>
                </ul>
            </div>
        </nav>
        <br>
        <h1>Persons</h1>
        <br>
        <div class="table-responsive mx-5" >
            <table class="table table-striped table-bordered text-center container">
                <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Identity</th>
                    <th scope="col">Name</th>
                    <th scope="col">Address</th>
                    <th scope="col">Phone</th>
                </tr>
                </thead>
                <tbody id="persons">
                    {% include "default/persons.html.twig" %}
                </tbody>
            </table>
        </div>
    </main>
    <script>
        document.getElementById('random').addEventListener('click', async () => {
            document.getElementById('seed').value = Math.floor(Math.random() * 1000);
            await updatePersons("{{ path('app_create') }}");
        });

        document.getElementById('seed').addEventListener('input', async () => {
            await updatePersons("{{ path('app_create') }}");
        });

        document.getElementById('errors-slider').addEventListener('input', async () => {
            document.getElementById('errors-input').value = document.getElementById('errors-slider').value;
            await updatePersons("{{ path('app_create') }}");
        });

        document.getElementById('errors-input').addEventListener('input', async () => {
            document.getElementById('errors-slider').value = document.getElementById('errors-input').value;
            await updatePersons("{{ path('app_create') }}");
        });

        document.getElementById('region').addEventListener('input', async () => {
            document.getElementById('errors-slider').value = document.getElementById('errors-input').value;
            await updatePersons("{{ path('app_create') }}");
        });

        window.addEventListener("scrollend", async () => {
            let parameters = getParameters();
            await fetch("{{ path('app_update') }}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json;charset=utf-8'
                },
                body: JSON.stringify(Array.from(parameters.entries()))
            })
                .then(response => response.text())
                .then(response => {
                    let text = document.getElementById('persons').innerHTML;
                    document.getElementById('persons').innerHTML = text + response;
                });
        });

        function getParameters()
        {
            let parameters = new Map();
            parameters.set('seed', document.getElementById('seed').value);
            parameters.set('region', document.getElementById('region').value);
            parameters.set('error', document.getElementById('errors-input').value);
            parameters.set('id', document.getElementsByClassName('person').length + 1)
            return parameters;
        }

        async function updatePersons(url)
        {
            let parameters = getParameters();
            await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json;charset=utf-8'
                },
                body: JSON.stringify(Array.from(parameters.entries()))
            })
                .then(response => response.text())
                .then(response => document.getElementById('persons').innerHTML = response);
        }
    </script>
{% endblock %}
